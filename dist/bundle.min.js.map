{
  "version": 3,
  "sources": ["../node_modules/universal-websocket-client/browser.js", "../lib/index.ts", "../lib/utils/completeParams.ts", "../lib/services/userService.ts", "../lib/services/accountService.ts", "../lib/services/authService.ts", "../lib/services/feeService.ts", "../lib/services/instrumentService.ts", "../lib/services/productService.ts", "../lib/services/reportService.ts", "../lib/services/systemService.ts", "../lib/models/common/orderType.ts", "../lib/utils/completeParamsArray.ts", "../lib/utils/parseIndexTrade.ts", "../lib/services/tradingService.ts", "../lib/core/hmac.ts", "../lib/models/index.ts", "../lib/models/common/orderState.ts", "../lib/models/common/orderSide.ts", "../lib/models/common/changeReason.ts", "../lib/models/common/makerTaker.ts", "../lib/models/enums/accountType.ts", "../lib/models/enums/actionType.ts", "../lib/models/enums/depositFeeMessages.ts", "../lib/models/enums/depositStatus.ts", "../lib/models/enums/direction.ts", "../lib/models/enums/feeProductType.ts", "../lib/models/enums/instrumentType.ts", "../lib/models/enums/orderFlag.ts", "../lib/models/enums/pegPriceType.ts", "../lib/models/enums/productType.ts", "../lib/models/enums/referenceType.ts", "../lib/models/enums/riskType.ts", "../lib/models/enums/sessionStatus.ts", "../lib/models/enums/sideType.ts", "../lib/models/enums/timeInForce.ts", "../lib/models/enums/tradeDirection.ts", "../lib/models/enums/tradeSide.ts", "../lib/models/enums/transactionReferenceTypes.ts", "../lib/models/enums/transactionTypes.ts", "../lib/models/enums/unsubscribeLevel2ErrorCode.ts", "../lib/models/enums/unsubscribeTradesError.ts", "../lib/models/enums/withdrawErrorCode.ts", "../lib/models/enums/withdrawFeeMessages.ts", "../lib/models/enums/withdrawTemplateType.ts", "../lib/models/response/getAccountFees.ts", "../lib/models/notbankError.ts", "../lib/models/standardError.ts", "../lib/models/subscriptionResponse.ts", "../lib/models/unsubscriptionResponse.ts", "../lib/core/http/httpClient.ts", "../lib/services/httpServiceFactory.ts", "../lib/core/websocket/websocketClient.ts", "../lib/core/websocket/callbackManager.ts", "../lib/constants/errorCode.ts", "../lib/core/websocket/SubscriptionIdentifier.ts", "../lib/utils/subscriptionCallbacksHandler.ts", "../lib/services/subscriptionService.ts", "../lib/services/websocketServicesFactory.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = WebSocket;\n", "import { HttpServiceFactory } from \"./services/httpServiceFactory\";\nimport { WebsocketServiceFactory } from \"./services/websocketServicesFactory\";\nimport * as models from \"./models\";\n\nexport const HttpClient = HttpServiceFactory;\n\nexport const WebsocketClient = WebsocketServiceFactory;\n\nexport default {\n  HttpClient: HttpServiceFactory,\n  WebsocketClient: WebsocketServiceFactory,\n  models,\n};\n", "export function completeParams<T>(\n  params: T,\n  omsId: number\n): T & { OMSId: number } {\n  return {\n    ...params,\n    OMSId: omsId\n  };\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { completeParams } from \"../utils/completeParams\";\n\n// *************************************REQUEST*************************************\nimport { GetUserAccountsRequest } from \"../models/request/getUserAccounts\";\nimport { GetUserDevicesRequest } from \"../models/request/getUserDevices\";\nimport { GetUserInfoRequest } from \"../models/request/getUserInfo\";\nimport { GetUserPermissionsRequest } from \"../models/request/getUserPermissions\";\n\n// *************************************RESPONSE*************************************\nimport { GetUserDevicesResponse } from \"../models/response/getUserDevices\";\nimport { GetUserAccountsResponse } from \"../models/response/getUserAccounts\";\nimport { GetUserInfoResponse } from \"../models/response/getUserInfo\";\nimport { GetUserPermissionsResponse } from \"../models/response/getUserPermissions\";\n\nexport class UserService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  public async getUserAccounts(\n    request: GetUserAccountsRequest\n  ): Promise<GetUserAccountsResponse> {\n    // Validate optional fields\n    if (request.UserId && typeof request.UserId !== \"number\")\n      throw new Error(\"UserId must be a number.\");\n\n    const params = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response: GetUserAccountsResponse = (await this.#serviceCore.request(\n      Endpoint.GET_USER_ACCOUNTS,\n      RequestType.POST,\n      params\n    )) as GetUserAccountsResponse;\n\n    return response;\n  }\n\n  public async getUserDevices(\n    request: GetUserDevicesRequest\n  ): Promise<GetUserDevicesResponse> {\n    // Validate optional fields\n    if (request.UserId && typeof request.UserId !== \"number\")\n      throw new Error(\"UserId must be a number.\");\n\n    // Make the HTTP request\n    const response: GetUserDevicesResponse = (await this.#serviceCore.request(\n      Endpoint.GET_USER_DEVICES,\n      RequestType.POST,\n      request\n    )) as GetUserDevicesResponse;\n\n    return response;\n  }\n\n  public async getUserInfo(\n    request: GetUserInfoRequest\n  ): Promise<GetUserInfoResponse> {\n    // Validate optional fields\n    if (request.UserId && typeof request.UserId !== \"number\")\n      throw new Error(\"UserId must be a number.\");\n\n    // Make the HTTP request\n    const response: GetUserInfoResponse = (await this.#serviceCore.request(\n      Endpoint.GET_USER_INFO,\n      RequestType.POST,\n      request\n    )) as GetUserInfoResponse;\n\n    return response;\n  }\n\n  public async getUserPermissions(\n    request: GetUserPermissionsRequest\n  ): Promise<GetUserPermissionsResponse> {\n    if (request.UserId == null || typeof request.UserId !== \"number\")\n      throw new Error(\"UserId is required and must be a number.\");\n\n    const response: GetUserPermissionsResponse =\n      (await this.#serviceCore.request(\n        Endpoint.GET_USER_PERMISSIONS,\n        RequestType.POST,\n        request\n      )) as GetUserPermissionsResponse;\n\n    return response;\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { completeParams } from \"../utils/completeParams\";\n\n// *************************************REQUEST*************************************\nimport { GetAccountPositionRequest } from \"../models/request/getAccountPositions\";\nimport { GetAccountSettlementPositionsRequest } from \"../models/request/getAccountSettlementPositions\";\nimport { GetAccountInfoRequest } from \"../models/request/getAccountInfo\";\nimport { GetAccountInstrumentStatisticsRequest } from \"../models/request/getAccountInstrumentStatistics\";\n\n// *************************************RESPONSE*************************************\nimport { AccountPositions } from \"../models/response/accountPositions\";\nimport { AccountSettlementPositionsResponse } from \"../models/response/getAccountSettlementPositions\";\nimport { AccountInfo } from \"../models/response/accountInfo\";\nimport { GetAccountInstrumentStatisticsResponse } from \"../models/response/getAccountInstrumentStatistics\";\nimport { GetAccountTransactionsRequest } from \"../models/request/getAccountTransactions\";\nimport { GetAccountTransactionsResponse } from \"../models/response/getAccountTransactions\";\n\nexport class AccountService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  public async getAccountTransactions(\n    request: GetAccountTransactionsRequest\n  ): Promise<GetAccountTransactionsResponse> {\n    if (request.AccountId && typeof request.AccountId !== \"number\") {\n      throw new Error(\"AccountId must be a number.\");\n    }\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    const response: GetAccountTransactionsResponse =\n      (await this.#serviceCore.request(\n        Endpoint.GET_ACCOUNT_TRANSACTIONS,\n        RequestType.POST,\n        paramsWithOMSId\n      )) as GetAccountTransactionsResponse;\n\n    return response;\n  }\n\n  public async getAccountPositions(\n    params: GetAccountPositionRequest\n  ): Promise<AccountPositions[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    // Llamada al endpoint\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_POSITIONS,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as AccountPositions[];\n\n    return response;\n  }\n\n  public async getAccountInstrumentStatistics(\n    params: GetAccountInstrumentStatisticsRequest\n  ): Promise<GetAccountInstrumentStatisticsResponse[]> {\n    if (!params.AccountId) {\n      throw new Error(\"AccountId is required field.\");\n    }\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_INSTRUMENT_STATISTICS,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetAccountInstrumentStatisticsResponse[];\n  }\n\n  public async getAccountSettlementPositions(\n    params: GetAccountSettlementPositionsRequest\n  ): Promise<AccountSettlementPositionsResponse> {\n    if (!params.AccountId) {\n      throw new Error(\"OMSId and AccountId are required fields.\");\n    }\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_SETTLEMENT_POSITIONS,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as AccountSettlementPositionsResponse;\n  }\n\n  public async getAccountInfo(\n    params: GetAccountInfoRequest\n  ): Promise<AccountInfo> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    // Llamamos al m\u00E9todo request con POST y casteamos la respuesta\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_INFO,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as AccountInfo;\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { WebAuthenticateUserRequest } from \"../models/request/webAuthenticateUser\";\nimport { WebAuthenticateUserResponse } from \"../models/response/webAuthenticateUser\";\n\nexport class AuthService {\n  #serviceCore: ServiceClient;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/?http#webauthenticateuser\n   */\n  async webAuthenticateUser(\n    params: WebAuthenticateUserRequest\n  ): Promise<WebAuthenticateUserResponse> {\n    return await this.#serviceCore.request(\n      Endpoint.WEB_AUTHENTICATE_USER,\n      RequestType.NONE,\n      params\n    );\n  }\n\n  /**\n   * https://apidoc.notbank.exchange/?http#logout\n   */\n  async logOut(): Promise<void> {\n    // Realiza la solicitud al endpoint utilizando el m\u00E9todo POST.\n    return await this.#serviceCore.request(Endpoint.LOGOUT, RequestType.POST);\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { GetAccountFeesRequest } from \"../models/request/getAccountFees\";\nimport { GetDepositFeeRequest } from \"../models/request/getDepositFee\";\nimport { GetOMSDepositFeesRequest } from \"../models/request/getOMSDepositFees\";\nimport { GetOMSWithdrawFeesRequest } from \"../models/request/getOMSWithdrawFees\";\nimport { GetOrderFeeRequest } from \"../models/request/getOrderFee\";\nimport { GetWithdrawFeeRequest } from \"../models/request/getWithdrawFee\";\nimport { GetAccountFeesResponse } from \"../models/response/getAccountFees\";\nimport { GetDepositFeeResponse } from \"../models/response/getDepositFee\";\nimport { GetOMSDepositFeesResponse } from \"../models/response/getOMSDepositFees\";\nimport { GetOMSWithdrawFeesResponse } from \"../models/response/getOMSWithdrawFees\";\nimport { GetOrderFeeResponse } from \"../models/response/getOrderFee\";\nimport { GetWithdrawFeeResponse } from \"../models/response/getWithdrawFee\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class FeeService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async getDepositFee(\n    params: GetDepositFeeRequest\n  ): Promise<GetDepositFeeResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_DEPOSIT_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetDepositFeeResponse;\n  }\n\n  async getWithdrawFee(\n    params: GetWithdrawFeeRequest\n  ): Promise<GetWithdrawFeeResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_WITHDRAW_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetWithdrawFeeResponse;\n  }\n\n  async getOMSWithdrawFees(\n    params: GetOMSWithdrawFeesRequest\n  ): Promise<GetOMSWithdrawFeesResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    // Call the service endpoint\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_OMS_WITHDRAW_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n\n    return response as GetOMSWithdrawFeesResponse[];\n  }\n\n  async getOMSDepositFees(\n    params: GetOMSDepositFeesRequest\n  ): Promise<GetOMSDepositFeesResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    // Call the service endpoint\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_OMS_DEPOSIT_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n\n    return response as GetOMSDepositFeesResponse[];\n  }\n\n  async getAccountFees(\n    params: GetAccountFeesRequest\n  ): Promise<GetAccountFeesResponse[]> {\n    // Validate required parameters\n    if (!params.AccountId) {\n      throw new Error(\"AccountId is required.\");\n    }\n\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    // Call the service endpoint\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_FEES,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n\n    return response as GetAccountFeesResponse[];\n  }\n\n  async getOrderFee(params: GetOrderFeeRequest): Promise<GetOrderFeeResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ORDER_FEE,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetOrderFeeResponse;\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { GetInstrumentRequest } from \"../models/request/getInstrument\";\nimport { GetInstrumentsRequest } from \"../models/request/getInstruments\";\nimport { GetInstrumentVerificationLevelConfigRequest } from \"../models/request/getInstrumentVerificationLevelConfig\";\nimport { GetInstrumentVerificationLevelConfigResponse } from \"../models/response/getInstrumentVerificationLevelConfig\";\nimport { InstrumentResponse } from \"../models/response/instrument\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class InstrumentService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async getInstruments(\n    params: GetInstrumentsRequest\n  ): Promise<InstrumentResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_INSTRUMENTS,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as InstrumentResponse[];\n  }\n\n  public async getInstrument(\n    params: GetInstrumentRequest\n  ): Promise<InstrumentResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_INSTRUMENT,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as InstrumentResponse;\n\n    return response;\n  }\n\n  async getInstrumentVerificationLevelConfigs(\n    params: GetInstrumentVerificationLevelConfigRequest\n  ): Promise<GetInstrumentVerificationLevelConfigResponse[]> {\n    // Validate required parameters\n    if (!params.AccountId) {\n      throw new Error(\"AccountId is required.\");\n    }\n\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    // Call the service endpoint\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_INSTRUMENT_VERIFICATION_LEVEL_CONFIG,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n\n    return response as GetInstrumentVerificationLevelConfigResponse[];\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { GetProductRequest } from \"../models/request/getProduct\";\nimport { GetProductsRequest } from \"../models/request/getProducts\";\nimport { GetVerificationLevelConfigRequest } from \"../models/request/getVerificationLevelConfig\";\nimport { GetProductResponse } from \"../models/response/getProduct\";\nimport { GetVerificationLevelConfigResponse } from \"../models/response/getVerificationLevelConfig\";\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class ProductService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async getProduct(params: GetProductRequest): Promise<GetProductResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_PRODUCT,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetProductResponse;\n\n    return response;\n  }\n\n  async getProducts(params: GetProductsRequest): Promise<GetProductResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_PRODUCTS,\n      RequestType.POST,\n      paramsWithOMSId\n    )) as GetProductResponse[];\n  }\n\n  async getVerificationLevelConfig(\n    params: GetVerificationLevelConfigRequest\n  ): Promise<GetVerificationLevelConfigResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    // Call the service endpoint\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_VERIFICATION_LEVEL_CONFIG,\n      RequestType.POST,\n      paramsWithOMSId\n    );\n\n    return response as GetVerificationLevelConfigResponse;\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\n\nimport { completeParams } from \"../utils/completeParams\";\n\nexport class ReportService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { HealthCheckResponse } from \"../models/response/healthCheck\";\nimport { PingResponse } from \"../models/response/ping\";\n\nexport class SystemService {\n  #serviceCore: ServiceClient;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async ping(): Promise<PingResponse> {\n    return (await this.#serviceCore.request(\n      Endpoint.PING,\n      RequestType.POST\n    )) as PingResponse;\n  }\n\n  async healthCheck(): Promise<HealthCheckResponse> {\n    return (await this.#serviceCore.request(\n      Endpoint.HEALTH_CHECK,\n      RequestType.POST\n    )) as HealthCheckResponse;\n  }\n}\n", "// Tipos de orden\nexport enum OrderTypeInt {\n  Unknown = 0,\n  Market = 1,\n  Limit = 2,\n  StopMarket = 3,\n  StopLimit = 4,\n  TrailingStopMarket = 5,\n  TrailingStopLimit = 6,\n  BlockTrade = 7\n}\n\nexport enum OrderTypeStr {\n  Unknown = \"Unknown\",\n  Market = \"Market\",\n  Limit = \"Limit\",\n  StopMarket = \"StopMarket\",\n  StopLimit = \"StopLimit\",\n  TrailingStopMarket = \"TrailingStopMarket\",\n  TrailingStopLimit = \"TrailingStopLimit\",\n  BlockTrade = \"BlockTrade\"\n}\n", "export function completeParamsArray<T>(\n  paramsArray: T[],\n  omsId: number\n): (T & { OMSId: number })[] {\n  return paramsArray.map(params => ({\n    ...params,\n    OMSId: omsId\n  }));\n}\n", "import { IndexTrade } from \"../models/enums/indexTrade\";\n\nexport function parseIndexTrade(\n  jsonTrade: number[] | { [key: number]: number }\n): IndexTrade {\n  return {\n    TradeId: jsonTrade[0],\n    InstrumentId: jsonTrade[1],\n    Quantity: jsonTrade[2],\n    Price: jsonTrade[3],\n    Order1: jsonTrade[4],\n    Order2: jsonTrade[5],\n    Tradetime: jsonTrade[6],\n    Direction: jsonTrade[7],\n    TakerSide: jsonTrade[8],\n    BlockTrade: jsonTrade[9] == 1,\n    OrderClientId: jsonTrade[10]\n  };\n}\n", "import { Endpoint } from \"../constants/endpoints\";\nimport { RequestType, ServiceClient } from \"../core/serviceClient\";\nimport { OrderTypeInt } from \"../models/common/orderType\";\nimport { IndexTrade } from \"../models/enums/indexTrade\";\nimport { CancelAllOrdersRequest } from \"../models/request/cancelAllOrders\";\nimport { CancelOrderRequest } from \"../models/request/cancelOrder\";\nimport { CancelReplaceOrderRequest } from \"../models/request/cancelReplaceOrder\";\nimport { GetAccountTradesRequest } from \"../models/request/getAccountTrades\";\nimport { GetL2SnapshotRequest } from \"../models/request/getL2Snapshot\";\nimport { GetLastTradesRequest } from \"../models/request/getLastTrades\";\nimport { GetLevel1Request } from \"../models/request/getLevel1\";\nimport { GetLevel1SummaryRequest } from \"../models/request/getLevel1Summary\";\nimport { GetLevel1SummaryMinRequest } from \"../models/request/getLevel1SummaryMin\";\nimport { GetOpenOrdersRequest } from \"../models/request/getOpenOrders\";\nimport { GetOpenTradeReportsRequest } from \"../models/request/getOpenTradeReports\";\nimport { GetOrdersHistoryRequest } from \"../models/request/getOrderHistory\";\nimport { GetOrderHistoryByOrderIdRequest } from \"../models/request/getOrderHistoryByOrderId\";\nimport { GetOrdersRequest } from \"../models/request/getOrders\";\nimport { GetOrderStatusRequest } from \"../models/request/getOrderStatus\";\nimport { GetTickerHistoryRequest } from \"../models/request/getTickerHistory\";\nimport { GetTradesHistoryRequest } from \"../models/request/getTradesHistory\";\nimport { ModifyOrderRequest } from \"../models/request/modifyOrder\";\nimport { OrderBookRequest } from \"../models/request/orderBook\";\nimport { SendCancelListRequest } from \"../models/request/sendCancelList\";\nimport { SendCancelReplaceListRequest } from \"../models/request/sendCancelReplaceList\";\nimport { SendOrderRequest } from \"../models/request/sendOrder\";\nimport { SendOrderListRequest } from \"../models/request/sendOrderList\";\nimport { TradesRequest } from \"../models/request/trades\";\nimport { CancelReplaceOrderResponse } from \"../models/response/cancelReplaceOrder\";\nimport { GetAccountTradesResponse } from \"../models/response/getAccountTrades\";\nimport { GetEnumsResponse } from \"../models/response/getEnums\";\nimport { GetL2SnapshotResponse, L2Snapshot } from \"../models/response/getL2Snapshot\";\nimport { GetLevel1Response } from \"../models/response/getLevel1\";\nimport { GetLevel1SummaryResponse } from \"../models/response/getLevel1Summary\";\nimport { GetLevel1SummaryMinResponse, Level1SummaryMin } from \"../models/response/getLevel1SummaryMin\";\nimport { GetOpenOrdersResponse } from \"../models/response/getOpenOrders\";\nimport { GetOpenTradeReportsResponse } from \"../models/response/getOpenTradeReports\";\nimport { GetOrderHistoryByOrderIdResponse } from \"../models/response/getOrderHistoryByOrderId\";\nimport { GetOrderStatusResponse } from \"../models/response/getOrderStatus\";\nimport { GetTickerHistoryResponse } from \"../models/response/getTickerHistory\";\nimport { Order } from \"../models/response/order\";\nimport { OrderBookResponse } from \"../models/response/orderBook\";\nimport { OrderTrade } from \"../models/response/orderTrade\";\nimport { SendOrderResponse } from \"../models/response/sendOrder\";\nimport { SummaryResponse } from \"../models/response/summary\";\nimport { TickerResponse } from \"../models/response/ticker\";\nimport { TradesResponse } from \"../models/response/trades\";\nimport { completeParams } from \"../utils/completeParams\";\nimport { completeParamsArray } from \"../utils/completeParamsArray\";\nimport { parseIndexTrade } from \"../utils/parseIndexTrade\";\n\nexport class TradingService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async sendOrderList(params: SendOrderListRequest): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return await this.#serviceCore.request(\n      Endpoint.SEND_ORDER_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  async sendCancelList(params: SendCancelListRequest): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return await this.#serviceCore.request(\n      Endpoint.SEND_CANCEL_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  async sendCancelReplaceList(\n    params: SendCancelReplaceListRequest,\n  ): Promise<void> {\n    const paramsWithOMSId = completeParamsArray(params, this.OMS_ID);\n    return await this.#serviceCore.request(\n      Endpoint.SEND_CANCEL_REPLACE_LIST,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  async modifyOrder(request: ModifyOrderRequest): Promise<void> {\n    if (\n      !request.OrderId ||\n      !request.InstrumentId ||\n      !request.Quantity ||\n      !request.AccountId\n    ) {\n      throw new Error(\"All fields are required for modifying an order.\");\n    }\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    return await this.#serviceCore.request(\n      Endpoint.MODIFY_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  async cancelAllOrders(params: CancelAllOrdersRequest): Promise<void> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return await this.#serviceCore.request(\n      Endpoint.CANCEL_ALL_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  async getOrderStatus(\n    params: GetOrderStatusRequest,\n  ): Promise<GetOrderStatusResponse> {\n    if (!params.AccountId && !params.OrderId) {\n      throw new Error(\"Either AccountId or OrderId is required.\");\n    }\n\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    const response = await this.#serviceCore.request(\n      Endpoint.GET_ORDER_STATUS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n\n    return response as GetOrderStatusResponse;\n  }\n\n  async getOrdersHistory(params: GetOrdersHistoryRequest): Promise<Order[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ORDERS_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as Order[];\n  }\n\n  async getTradesHistory(\n    params: GetTradesHistoryRequest,\n  ): Promise<OrderTrade[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_TRADES_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as OrderTrade[];\n  }\n\n  async getOrderHistoryByOrderId(\n    params: GetOrderHistoryByOrderIdRequest,\n  ): Promise<GetOrderHistoryByOrderIdResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.GET_ORDER_HISTORY_BY_ORDER_ID,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as GetOrderHistoryByOrderIdResponse[];\n  }\n\n  public async getTickerHistory(\n    params: GetTickerHistoryRequest,\n  ): Promise<GetTickerHistoryResponse[]> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_TICKER_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((item): GetTickerHistoryResponse => ({\n      EndDateTime: item[0], // Fecha/hora de cierre en POSIX\n      High: item[1], // Precio m\u00E1ximo\n      Low: item[2], // Precio m\u00EDnimo\n      Open: item[3], // Precio de apertura\n      Close: item[4], // Precio de cierre\n      Volume: item[5], // Volumen total\n      Bid: item[6], // Mejor precio de compra\n      Ask: item[7], // Mejor precio de venta\n      InstrumentId: item[8], // ID del instrumento\n      BeginDateTime: item[9], // Fecha/hora de inicio en POSIX\n    }));\n  }\n\n  public async getLastTrades(\n    request: GetLastTradesRequest,\n  ): Promise<IndexTrade[]> {\n    // Validate required fields\n    if (!request.InstrumentId)\n      throw new Error(\"InstrumentId is required for getting last trades.\");\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_LAST_TRADES,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((item) => parseIndexTrade(item));\n  }\n\n  async getLevel1Summary(\n    request: GetLevel1SummaryRequest,\n  ): Promise<GetLevel1SummaryResponse[]> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    // Make the HTTP request\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_LEVEL1_SUMMARY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as string[];\n\n    return response.map((data) => JSON.parse(data) as GetLevel1SummaryResponse);\n  }\n\n  public async getLevel1SummaryMin(\n    request: GetLevel1SummaryMinRequest,\n  ): Promise<GetLevel1SummaryMinResponse> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n    // Make the HTTP request\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_LEVEL1_SUMMARY_MIN,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((data): Level1SummaryMin => ({\n      InstrumentId: data[0],\n      InstrumentSymbol: data[1].toString(),\n      LastTradedPx: data[2],\n      Rolling24HrPxChange: data[3],\n      Rolling24HrPxChangePercent: data[4],\n      Rolling24HrVolume: data[5],\n    }));\n  }\n\n  public async getOpenTradeReports(\n    request: GetOpenTradeReportsRequest,\n  ): Promise<GetOpenTradeReportsResponse> {\n    // Validate required fields\n    if (!request.AccountId) {\n      throw new Error(\n        \"AccountId is required for retrieving open trade reports.\",\n      );\n    }\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response: GetOpenTradeReportsResponse =\n      (await this.#serviceCore.request(\n        Endpoint.GET_OPEN_TRADE_REPORTS,\n        RequestType.POST,\n        paramsWithOMSId,\n      )) as GetOpenTradeReportsResponse;\n\n    return response;\n  }\n\n  public async getOrders(request: GetOrdersRequest): Promise<Order[]> {\n    // Validate required fields\n    if (!request.AccountId) {\n      throw new Error(\"AccountId is required for retrieving orders.\");\n    }\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as Order[];\n\n    return response;\n  }\n\n  public async getOrderHistory(\n    request: GetOrdersHistoryRequest,\n  ): Promise<Order[]> {\n    // Validate required fields\n    if (!request.AccountId) {\n      throw new Error(\"AccountId is required for retrieving order history.\");\n    }\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n\n    // Make the HTTP request\n    const response = (await this.#serviceCore.request(\n      Endpoint.GET_ORDER_HISTORY,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as Order[];\n\n    return response;\n  }\n\n  async sendOrder(request: SendOrderRequest): Promise<SendOrderResponse> {\n    if (\n      request.InstrumentId == null ||\n      request.AccountId == null ||\n      request.TimeInForce == null ||\n      request.Side == null ||\n      request.OrderType == null\n    ) {\n      throw new Error(\n        \"InstrumentId, AccountId, TimeInForce, Side, and OrderType are required\",\n      );\n    }\n    if (request.OrderType === OrderTypeInt.Limit && request.LimitPrice == null) {\n      throw new Error(\"LimitPrice is required for Limit Orders\");\n    }\n    if (\n      request.UseDisplayQuantity &&\n      (request.DisplayQuantity == null || request.DisplayQuantity <= 0)\n    ) {\n      throw new Error(\n        \"DisplayQuantity must be greater than 0 when UseDisplayQuantity is true\",\n      );\n    }\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    const response = await this.#serviceCore.request(\n      Endpoint.SEND_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n\n    return response as SendOrderResponse;\n  }\n\n  async cancelReplaceOrder(\n    params: CancelReplaceOrderRequest,\n  ): Promise<CancelReplaceOrderResponse> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return (await this.#serviceCore.request(\n      Endpoint.CANCEL_REPLACE_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as CancelReplaceOrderResponse;\n  }\n\n  async cancelOrder(params: CancelOrderRequest): Promise<void> {\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n    return await this.#serviceCore.request(\n      Endpoint.CANCEL_ORDER,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n  }\n\n  public async getOpenOrders(\n    params: GetOpenOrdersRequest,\n  ): Promise<GetOpenOrdersResponse[]> {\n    if (!params.AccountId) {\n      throw new Error(\"getOpenOrders requires AccountId.\");\n    }\n\n    const paramsWithOMSId = completeParams(params, this.OMS_ID);\n\n    const response = await this[\"#serviceCore\"].request(\n      Endpoint.GET_OPEN_ORDERS,\n      RequestType.POST,\n      paramsWithOMSId,\n    );\n\n    return response as GetOpenOrdersResponse[];\n  }\n\n  public async getAccountTrades(\n    request: GetAccountTradesRequest,\n  ): Promise<GetAccountTradesResponse> {\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response: GetAccountTradesResponse = (await this.#serviceCore.request(\n      Endpoint.GET_ACCOUNT_TRADES,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as GetAccountTradesResponse;\n\n    return response;\n  }\n\n  public async getSummary(): Promise<SummaryResponse> {\n    const response = (await this.#serviceCore.request(\n      Endpoint.SUMMARY,\n      RequestType.POST,\n    )) as SummaryResponse;\n\n    return response;\n  }\n\n  public async getTicker(): Promise<TickerResponse> {\n    const response = (await this.#serviceCore.request(\n      Endpoint.TICKER,\n      RequestType.POST,\n    )) as TickerResponse;\n\n    return response;\n  }\n\n  public async getOrderBook(\n    request: OrderBookRequest,\n  ): Promise<OrderBookResponse> {\n    if (!request.Market_Pair) {\n      throw new Error(\"Market_Pair is required.\");\n    }\n\n    const response = await this.#serviceCore.request(\n      Endpoint.ORDER_BOOK,\n      RequestType.POST,\n      request,\n    );\n\n    return response as OrderBookResponse;\n  }\n\n  public async getTrades(params: TradesRequest): Promise<TradesResponse[]> {\n    const response = (await this.#serviceCore.request(\n      Endpoint.TRADES,\n      RequestType.POST,\n      params,\n    )) as TradesResponse[];\n\n    return response;\n  }\n\n  public async getL2Snapshot(\n    request: GetL2SnapshotRequest,\n  ): Promise<GetL2SnapshotResponse> {\n    // Validate required fields\n    if (!request.InstrumentId)\n      throw new Error(\n        \"InstrumentId is required for retrieving Level 2 snapshot.\",\n      );\n    if (request.Depth <= 0) throw new Error(\"Depth must be greater than 0.\");\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response: number[][] = (await this.#serviceCore.request(\n      Endpoint.GET_L2_SNAPSHOT,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as number[][];\n\n    return response.map((snapshot): L2Snapshot => ({\n      MDUpdateID: snapshot[0],\n      NumberOfUniqueAccounts: snapshot[1],\n      ActionDateTime: snapshot[2],\n      ActionType: snapshot[3],\n      LastTradePrice: snapshot[4],\n      NumberOfOrders: snapshot[5],\n      Price: snapshot[6],\n      ProductPairCode: snapshot[7],\n      Quantity: snapshot[8],\n      Side: snapshot[9],\n    }));\n  }\n\n  public async getLevel1(\n    request: GetLevel1Request,\n  ): Promise<GetLevel1Response> {\n    // Validate required fields\n    if (!request.InstrumentId)\n      throw new Error(\n        \"InstrumentId is required for retrieving Level 1 snapshot.\",\n      );\n\n    const paramsWithOMSId = completeParams(request, this.OMS_ID);\n\n    // Make the HTTP request\n    const response: GetLevel1Response = (await this.#serviceCore.request(\n      Endpoint.GET_LEVEL1,\n      RequestType.POST,\n      paramsWithOMSId,\n    )) as GetLevel1Response;\n\n    return response;\n  }\n\n  public async getEnums(): Promise<GetEnumsResponse> {\n    // Make the HTTP request\n    const response: GetEnumsResponse = (await this.#serviceCore.request(\n      Endpoint.GET_ENUMS,\n      RequestType.POST,\n    )) as GetEnumsResponse;\n\n    return response;\n  }\n}\n", "import crypto from \"crypto\";\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n\nexport function getNonce(): string {\n  return getRandomInt(1_000_000).toString();\n}\n\nexport function sign(\n  apiPublicKey: string,\n  apiSecretKey: string,\n  userId: string,\n  nonce: string\n): string {\n  var message = nonce + userId + apiPublicKey;\n  const hmac256 = crypto.createHmac(\"sha256\", apiSecretKey);\n  hmac256.update(message);\n  return hmac256.digest(\"hex\");\n}\n", "export * from \"./common\";\nexport * from \"./enums\";\nexport * from \"./request\";\nexport * from \"./response\";\nexport * from \"./standardError\";\nexport * from \"./standardResponse\";\nexport * from \"./subscriptionResponse\";\nexport * from \"./unsubscriptionResponse\";\n", "export enum OrderState {\n  Unknown = \"Unknown\",\n  Working = \"Working\",\n  Rejected = \"Rejected\",\n  Canceled = \"Canceled\",\n  Expired = \"Expired\",\n  FullyExecuted = \"Fully Executed\"\n}\n", "// Lado de la orden\nexport enum OrderSide {\n  Buy = 0,\n  Sell = 1\n}\n", "export enum ChangeReason {\n  UNKNOWN = \"Unknown\",\n  NEWINPUTACCEPTED = \"NewInputAccepted\",\n  NEWINPUTREJECTED = \"NewInputRejected\",\n  OTHERREJECTED = \"OtherRejected\",\n  EXPIRED = \"Expired\",\n  TRADE = \"Trade\",\n  SYSTEMCANCELED_NOMOREDMARKET = \"SystemCanceled_NoMoreMarket\",\n  SYSTEMCANCELED_BELOWMINIMUM = \"SystemCanceled_BelowMinimum\",\n  SYSTEMCANCELED_PRICECOLLAR = \"SystemCanceled_PriceCollar\",\n  SYSTEMCANCELED_MARGINFAILED = \"SystemCanceled_MarginFailed\",\n  USERMODIFIED = \"UserModified\"\n}\n", "// Tipo del Maker/Taker\nexport enum MakerTaker {\n  Unknown = 0,\n  Maker = 1,\n  Taker = 2\n}\n", "export enum AccountType {\n  ASSET = \"Asset\", // Representa un tipo de cuenta de activo\n  LIABILITY = \"Liability\" // Representa un tipo de cuenta de pasivo\n}\n", "/**\n * Acci\u00F3n de la actualizaci\u00F3n en Level 2:\n * 0 = New\n * 1 = Update\n * 2 = Deletion\n */\nexport enum ActionType {\n  NEW = 0,\n  UPDATE = 1,\n  DELETION = 2\n}\n", "// Enumeraci\u00F3n de los posibles mensajes sobre la tarifa de dep\u00F3sito\nexport enum DepositFeeMessages {\n  Success = \"Fee calculated successfully\",\n  InvalidRequest = \"Invalid Request\",\n  AccountOrProductNotFound = \"Account or Product not found\"\n}\n", "// Estados posibles para el dep\u00F3sito\nexport enum DepositStatus {\n  New = \"New\", // El dep\u00F3sito se crea en estado \"Nuevo\".\n  Pending = \"Pending\", // Dep\u00F3sito en progreso.\n  FullyProcessed = \"FullyProcessed\", // Dep\u00F3sito completado.\n  Error = \"Error\" // Dep\u00F3sito con error.\n}\n", "// Enumerados para la solicitud\nexport enum Direction {\n  NoChange = 0,\n  Uptick = 1,\n  DownTick = 2\n}\n", "// Enum para los valores posibles de FeeProductType\nexport enum FeeProductType {\n  BASE_PRODUCT = \"BaseProduct\", // Tarifas cobradas en el producto base\n  SINGLE_PRODUCT = \"SingleProduct\" // Tarifas cobradas en un producto espec\u00EDfico\n}\n", "export enum InstrumentType {\n  UNKNOWN = \"Unknown\",\n  STANDARD = \"Standard\"\n}\n", "// Flags de la orden\nexport enum OrderFlag {\n  NoAccountRiskCheck = \"NoAccountRiskCheck\",\n  AddedToBook = \"AddedToBook\",\n  RemovedFromBook = \"RemovedFromBook\",\n  PostOnly = \"PostOnly\",\n  Liquidation = \"Liquidation\",\n  ReverseMarginPosition = \"ReverseMarginPosition\"\n}\n", "// Tipo de precio para \u00F3rdenes Stop y Trailing\nexport enum PegPriceType {\n  Last = 1,\n  Bid = 2,\n  Ask = 3,\n  Midpoint = 4 // No soportado actualmente\n}\n", "export enum ProductType {\n  UNKNOWN = \"Unknown\",\n  NATIONAL_CURRENCY = \"NationalCurrency\",\n  CRYPTO_CURRENCY = \"CryptoCurrency\",\n  CONTRACT = \"Contract\"\n}\n", "// Tipo de referencia\nexport enum ReferenceType {\n  Withdraw = \"Withdraw\" // Siempre ser\u00E1 \"Withdraw\" para esta transacci\u00F3n\n}\n", "// Enum para los valores posibles de RiskType\nexport enum RiskType {\n  UNKNOWN = \"Unknown\", // Error o tipo de riesgo no definido\n  NORMAL = \"Normal\", // Riesgo est\u00E1ndar\n  NO_RISK_CHECK = \"NoRiskCheck\", // Sin chequeo de riesgo\n  NO_TRADING = \"NoTrading\", // El usuario no puede operar\n  CREDIT = \"Credit\" // Riesgo basado en cr\u00E9dito\n}\n", "export enum SessionStatus {\n  UNKNOWN = \"Unknown\",\n  RUNNING = \"Running\",\n  PAUSED = \"Paused\",\n  STOPPED = \"Stopped\",\n  STARTING = \"Starting\",\n  RUNNING_POST_ONLY = \"RunningPostOnly\"\n}\n", "export enum SideType {\n  BUY = \"Buy\",\n  SELL = \"Sell\"\n}\n", "// Tiempo de ejecuci\u00F3n\nexport enum TimeInForce {\n  Unknown = 0,\n  GTC = 1, // Good 'til canceled\n  OPG = 2, // Execute as close to opening price\n  IOC = 3, // Immediate or canceled\n  FOK = 4, // Fill or kill\n  GTX = 5, // Good 'til executed\n  GTD = 6 // Good 'til date\n}\n", "// Direcci\u00F3n de la transacci\u00F3n en el mercado\nexport enum TradeDirection {\n  NoChange = 0,\n  Uptick = 1,\n  DownTick = 2\n}\n", "// Lados del comercio (Side)\nexport enum TradeSide {\n  Buy = 0,\n  Sell = 1,\n  Short = 2,\n  Unknown = 3\n}\n", "export enum TransactionReferenceTypes {\n  Trade = \"Trade\",\n  Deposit = \"Deposit\",\n  Withdraw = \"Withdraw\",\n  Transfer = \"Transfer\",\n  OrderHold = \"OrderHold\",\n  WithdrawHold = \"WithdrawHold\",\n  DepositHold = \"DepositHold\",\n  MarginHold = \"MarginHold\",\n  ManualHold = \"ManualHold\",\n  ManualEntry = \"ManualEntry\",\n  MarginAcquisition = \"MarginAcquisition\",\n  MarginRelinquish = \"MarginRelinquish\",\n  MarginInterestNetting = \"MarginInterestNetting\",\n  MarginOperatorTransferToMarginAccount = \"MarginOperatorTransferToMarginAccount\",\n  MarginOperatorTransferToAssetAccount = \"MarginOperatorTransferToAssetAccount\",\n  MarginUserTransfer = \"MarginUserTransfer\",\n  MarginPositionReverseTrade = \"MarginPositionReverseTrade\",\n  AffiliateRebate = \"AffiliateRebate\",\n  DistributionEntry = \"DistributionEntry\",\n  TransferHold = \"TransferHold\",\n  AirDrop = \"AirDrop\"\n}\n", "export enum TransactionTypes {\n  Fee = \"Fee\",\n  Trade = \"Trade\",\n  Other = \"Other\",\n  Reverse = \"Reverse\",\n  Hold = \"Hold\",\n  Rebate = \"Rebate\",\n  MarginAcquisition = \"MarginAcquisition\",\n  MarginRelinquishByTrade = \"MarginRelinquishByTrade\",\n  MarginInterestTransfer = \"MarginInterestTransfer\",\n  MarginOperatorTransferToMarginAccount = \"MarginOperatorTransferToMarginAccount\",\n  MarginOperatorTransferToAssetAccount = \"MarginOperatorTransferToAssetAccount\",\n  MarginUserTransfer = \"MarginUserTransfer\",\n  MarginRelinquishByTransfer = \"MarginRelinquishByTransfer\",\n  MarginRelinquishByReverseTrade = \"MarginRelinquishByReverseTrade\",\n  Distribution = \"Distribution\",\n  Payment = \"Payment\",\n  OperatorLend = \"OperatorLend\",\n  OperatorReceived = \"OperatorReceived\",\n  Rebalance = \"Rebalance\",\n  Commission = \"Commission\",\n  AirDrop = \"AirDrop\"\n}\n", "export enum UnsubscribeLevel2ErrorCode {\n  SUCCESS = 0,\n  NOT_AUTHORIZED = 20,\n  INVALID_REQUEST = 100,\n  OPERATION_FAILED = 101,\n  SERVER_ERROR = 102,\n  RESOURCE_NOT_FOUND = 104\n}\n", "export enum UnsubscribeTradesError {\n  NotAuthorized = 20,\n  InvalidRequest = 100,\n  OperationFailed = 101,\n  ServerError = 102,\n  ResourceNotFound = 104\n}\n", "// C\u00F3digos de error posibles\nexport enum WithdrawErrorCode {\n  NoError = 0,\n  NotAuthorized = 20,\n  InvalidRequest = 100,\n  OperationFailed = 101,\n  ServerError = 102,\n  ResourceNotFound = 104\n}\n", "export enum WithdrawFeeMessages {\n  Success = \"Fee calculated successfully\",\n  InvalidRequest = \"Invalid Request\",\n  AccountOrProductNotFound = \"Account or Product not found\"\n}\n", "// Tipos de plantilla (con posibles valores)\nexport enum WithdrawTemplateType {\n  ToExternalBitcoinAddress = \"ToExternalBitcoinAddress\",\n  ToInternalAccount = \"ToInternalAccount\",\n  ToBankAccount = \"ToBankAccount\"\n}\n", "import { OrderTypeStr } from \"../common\";\n\nexport interface GetAccountFeesResponse {\n  FeeId: number;\n  OMSId: number;\n  FeeTier: number;\n  AccountId: number;\n  FeeAmt: number;\n  FeeCalcType: FeeCalcType;\n  FeeType: FeeType;\n  LadderThreshold: number;\n  LadderSeconds: number;\n  IsActive: boolean;\n  InstrumentId: number;\n  OrderType: OrderTypeStr;\n  PeggedProductId: number;\n}\n\nexport enum FeeCalcType {\n  Flat = \"Flat\",\n  Percentage = \"Percentage\",\n}\n\nexport enum FeeType {\n  Flat = \"Flat\",\n  MakerFee = \"MakerFee\",\n  TakerFee = \"TakerFee\",\n  PeggedProductFee = \"PeggedProductFee\",\n  AffiliateFee = \"AffiliateFee\",\n}\n", "export class NotbankError extends Error {}\n", "import { NotbankError } from \"./notbankError\";\nimport { StandardResponse } from \"./standardResponse\";\n\nexport class StandardError extends NotbankError {\n  errormsg: string;\n  errorcode: number;\n  detail: string;\n\n  constructor(standardResponse: StandardResponse) {\n    var errMsg = `Standard Error (code=${standardResponse.errorcode})`;\n    if (standardResponse.errormsg) {\n      errMsg += \". \" + standardResponse.errormsg;\n    }\n    if (standardResponse.detail) {\n      errMsg += \". \" + standardResponse.detail;\n    }\n    super(errMsg);\n    this.errorcode = standardResponse.errorcode || standardResponse.statusCode;\n    this.errormsg = standardResponse.errormsg;\n    this.detail = standardResponse.detail;\n  }\n}\n", "export class UnsubscriptionResponse {\n  UnSubscribed: boolean;\n}\n", "export class SubscriptionResponse {\n  Subscribed: boolean;\n}\n", "import { Endpoint } from \"../../constants/endpoints\";\nimport {\n  AuthenticateUserRequest,\n  AuthenticateUserResponse,\n  StandardError,\n  StandardResponse\n} from \"../../models\";\nimport { RequestType, ServiceClient } from \"../serviceClient\";\nimport { MessageFrame } from \"../websocket/messageFrame\";\nimport { ResponseHandler } from \"../websocket/responseHandler\";\nimport { SubscriptionHandler } from \"../websocket/subscriptionHandler\";\n\nexport class HttpClient implements ServiceClient {\n  #aptoken: string | null;\n  #HOST: string;\n\n  constructor(domain: string) {\n    this.#aptoken = null;\n    this.#HOST = \"https://\" + domain + \"/ap/\";\n  }\n\n  async request<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    params?: T1\n  ): Promise<T2> {\n    if (requestType === RequestType.GET) {\n      return this.requestGet(endpoint, { params: params });\n    }\n    if (requestType === RequestType.POST) {\n      return this.requestPost(endpoint, params);\n    }\n    throw new Error(`Request type not implemented. ${requestType}`);\n  }\n\n  async requestPost<T1, T2>(endpoint: string, message?: T1): Promise<T2> {\n    var response = await fetch(this.getUrl(endpoint), {\n      method: \"POST\",\n      body: message ? JSON.stringify(message) : null,\n      headers: this.getHeaders()\n    });\n    return this.handleResponse<T2>(response);\n  }\n\n  async requestGet<T1, T2>(\n    endpoint: string,\n    config: { params?: T1; extraHeaders?: any } = {}\n  ): Promise<T2> {\n    var response = await fetch(\n      this.getUrlWithSearchParams(endpoint, config.params),\n      {\n        method: \"GET\",\n        headers: this.getHeaders(config.extraHeaders)\n      }\n    );\n    return await this.handleResponse<T2>(response);\n  }\n\n  private async handleResponse<T>(response: Response): Promise<T> {\n    if (response.status >= 300 || response.status < 200) {\n      throw new Error(\n        `http error (${\n          response.status\n        }) not a successfull response. ${response.text()}`\n      );\n    }\n    var jsonResponse = await response.json();\n    var standardResponse = jsonResponse as StandardResponse;\n    if (\n      standardResponse?.result === false &&\n      standardResponse?.errorcode != null\n    ) {\n      throw new StandardError(standardResponse);\n    }\n    return jsonResponse as T;\n  }\n\n  getHeaders(extraHeaders?: any): any {\n    var headers = {\n      \"Content-type\": \"application/json\",\n      charset: \"UTF-8\"\n    };\n    if (this.#aptoken != null) {\n      headers[\"aptoken\"] = this.#aptoken;\n    }\n    if (extraHeaders) {\n      return { ...headers, ...extraHeaders };\n    }\n    return headers;\n  }\n\n  getUrlWithSearchParams(endpoint: string, params?: any): string {\n    if (params) {\n      return this.getUrl(endpoint) + \"?\" + new URLSearchParams(params);\n    }\n    return this.getUrl(endpoint);\n  }\n\n  async authenticate(params: AuthenticateUserRequest): Promise<void> {\n    var response = (await this.requestGet(Endpoint.AUTHENTICATE, {\n      extraHeaders: params\n    })) as AuthenticateUserResponse;\n    this.#aptoken = response.SessionToken;\n  }\n\n  async authenticateUser(params: AuthenticateUserRequest): Promise<void> {\n    var response = (await this.requestGet(Endpoint.AUTHENTICATE_USER, {\n      extraHeaders: params\n    })) as AuthenticateUserResponse;\n    this.#aptoken = response.SessionToken;\n  }\n\n  subscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    subscriptionCallbacks: SubscriptionHandler<MessageFrame>[]\n  ): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  unsubscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    callback_ids: string[]\n  ): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setResponseHandler<T1, T2>(responseHandler: ResponseHandler<T1, T2>): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  setResponseHandlers<T>(responseHandlers: SubscriptionHandler<T>[]): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  getUrl(endpoint: string): string {\n    return this.#HOST + endpoint;\n  }\n}\n", "import { UserService } from \"./userService\";\nimport { AccountService } from \"./accountService\";\nimport { AuthService } from \"./authService\";\nimport { FeeService } from \"./feeService\";\nimport { InstrumentService } from \"./instrumentService\";\nimport { ProductService } from \"./productService\";\nimport { ReportService } from \"./reportService\";\nimport { SystemService } from \"./systemService\";\nimport { TradingService } from \"./tradingService\";\nimport { getNonce, sign } from \"../core/hmac\";\nimport { HttpClient } from \"../core/http/httpClient\";\n\nconst DEFAULT_DOMAIN = \"api.notbank.exchange\";\n\nexport class HttpServiceFactory {\n  #httpCore: HttpClient;\n\n  constructor(domain?: string) {\n    const finalDomain = domain || DEFAULT_DOMAIN;\n    this.#httpCore = new HttpClient(finalDomain);\n  }\n\n  async authenticate(params: {\n    ApiPublicKey: string;\n    ApiSecretKey: string;\n    UserId: string;\n  }): Promise<void> {\n    var nonce = getNonce();\n    var signature = sign(\n      params.ApiPublicKey,\n      params.ApiSecretKey,\n      params.UserId,\n      nonce\n    );\n    await this.#httpCore.authenticate({\n      ApiKey: params.ApiPublicKey,\n      Signature: signature,\n      UserId: params.UserId,\n      Nonce: nonce\n    });\n  }\n\n  async authenticateUser(params: {\n    ApiPublicKey: string;\n    ApiSecretKey: string;\n    UserId: string;\n  }): Promise<void> {\n    var nonce = getNonce();\n    var signature = sign(\n      params.ApiPublicKey,\n      params.ApiSecretKey,\n      params.UserId,\n      nonce\n    );\n    await this.#httpCore.authenticateUser({\n      ApiKey: params.ApiPublicKey,\n      Signature: signature,\n      UserId: params.UserId,\n      Nonce: nonce\n    });\n  }\n\n  newAccountService(): AccountService {\n    return new AccountService(this.#httpCore);\n  }\n\n  newAuthService(): AuthService {\n    return new AuthService(this.#httpCore);\n  }\n\n  newFeeService(): FeeService {\n    return new FeeService(this.#httpCore);\n  }\n\n  newInstrumentService(): InstrumentService {\n    return new InstrumentService(this.#httpCore);\n  }\n\n  newProductService(): ProductService {\n    return new ProductService(this.#httpCore);\n  }\n\n  newReportService(): ReportService {\n    return new ReportService(this.#httpCore);\n  }\n\n  newSystemService(): SystemService {\n    return new SystemService(this.#httpCore);\n  }\n\n  newTradingService(): TradingService {\n    return new TradingService(this.#httpCore);\n  }\n\n  newUserService(): UserService {\n    return new UserService(this.#httpCore);\n  }\n}\n", "import WebSocket from \"universal-websocket-client\";\nimport { Endpoint } from \"../../constants/endpoints\";\nimport { MessageFrame, MessageType } from \"./messageFrame\";\nimport { SubscriptionHandler } from \"./subscriptionHandler\";\nimport { RequestType, ServiceClient } from \"../serviceClient\";\nimport { StandardError, StandardResponse } from \"../../models\";\nimport { WebsocketHooks } from \"./websocketHooks\";\nimport { CallbackManager } from \"./callbackManager\";\nimport ErrorCode from \"../../constants/errorCode\";\nimport { SubscriptionIdentifier } from \"./SubscriptionIdentifier\";\n\nconst emptyFn: (o: MessageFrame) => void = (o: MessageFrame) => {};\n\nexport class WebsocketClient implements ServiceClient {\n  #domain: string;\n  #callbackManager: CallbackManager;\n  #websocket: WebSocket;\n  #peekMessageIn: (message: MessageFrame) => void;\n  #peekMessageOut: (message: MessageFrame) => void;\n\n  constructor(params: {\n    domain: string;\n    peekMessageIn?: (message: MessageFrame) => void;\n    peekMessageOut?: (message: MessageFrame) => void;\n  }) {\n    this.#domain = params.domain;\n    this.#callbackManager = new CallbackManager();\n    this.#peekMessageIn = params.peekMessageIn || (_ => {});\n    this.#peekMessageOut = params.peekMessageOut || (_ => {});\n  }\n  // TODO: maybe use better names than hook: websockethooks\n  async connect(hooks: WebsocketHooks = {}) {\n    this.#websocket = new WebSocket(\"wss://\" + this.#domain + \"/wsgateway\");\n    this.#websocket.onopen = event => hooks.onOpen?.(event);\n    this.#websocket.onclose = event => hooks.onClose?.(event);\n    this.#websocket.onerror = event => hooks.onError?.(event);\n    this.#websocket.addEventListener(\"message\", event => {\n      // TODO: handle conversion exception\n      const messageFrame = JSON.parse(event.data) as MessageFrame;\n      this.#handleMessage(messageFrame);\n    });\n    this.#websocket.addEventListener(\"message\", event =>\n      hooks.onMessage?.(event)\n    );\n    return new Promise<void>((resolve, _) =>\n      this.#websocket.addEventListener(\"open\", _ => resolve())\n    );\n  }\n\n  #getSubscriptionCallbackId(message: MessageFrame): string {\n    return SubscriptionIdentifier.getFromMessageFrame(message);\n  }\n\n  #handleMessage(message: MessageFrame) {\n    this.#peekMessageIn(message);\n    const callback = this.#callbackManager.popCallback(message.i);\n    if (callback != null) {\n      callback(message);\n      if (isErrorMessage(message)) {\n        return;\n      }\n    }\n    const callbackId = this.#getSubscriptionCallbackId(message);\n    const subscriptionCallback =\n      this.#callbackManager.getSubscriptionCallback(callbackId);\n\n    if (subscriptionCallback != null) {\n      subscriptionCallback(message);\n      return;\n    }\n  }\n\n  close(): void {\n    this.#websocket.close();\n  }\n\n  get readyState(): number {\n    return this.#websocket.readyState;\n  }\n\n  request<T1, T2>(\n    endpoint: string,\n    requestType: RequestType,\n    message?: T1\n  ): Promise<T2> {\n    return this.#request(endpoint, message, MessageType.REQUEST);\n  }\n\n  #request<T1, T2>(\n    endpoint: string,\n    message?: T1,\n    messageType: MessageType = MessageType.REQUEST\n  ): Promise<T2> {\n    return new Promise((resolve, reject) => {\n      this.#requestToCallback(\n        endpoint,\n        JSON.stringify(message) || \"{}\",\n        messageType,\n        this.#handleRequestResponse<T2>(reject, resolve)\n      );\n    });\n  }\n\n  #handleRequestResponse<T>(\n    reject: (reason?: any) => void,\n    resolve: (value: T | PromiseLike<T>) => void\n  ): (o: MessageFrame) => void {\n    return (response: MessageFrame) => {\n      try {\n        var payload = JSON.parse(response.o);\n      } catch (e) {\n        reject(newStandardErrorFromString(response.o));\n        return;\n      }\n      if (response.m === MessageType.ERROR) {\n        reject(new StandardError(payload));\n        return;\n      }\n      var standardResponse = payload as StandardResponse;\n      if (\n        standardResponse?.result === false &&\n        standardResponse?.errormsg != null\n      ) {\n        reject(new StandardError(payload));\n        return;\n      }\n      resolve(payload as T);\n    };\n  }\n\n  async subscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    subscriptionCallbacks: SubscriptionHandler<MessageFrame>[]\n  ): Promise<void> {\n    subscriptionCallbacks.map(handler =>\n      this.#callbackManager.addSubscriptionCallback(\n        SubscriptionIdentifier.get(\n          handler.eventName,\n          firstIdentifier,\n          secondIdentifier\n        ),\n        handler.eventHandler\n      )\n    );\n    return this.#request<T, void>(endpoint, message, MessageType.REQUEST);\n  }\n\n  async unsubscribe<T>(\n    endpoint: string,\n    firstIdentifier: number | null,\n    secondIdentifier: number | null,\n    message: T,\n    callbackIds: string[]\n  ): Promise<void> {\n    this.#callbackManager.removeSubscriptionCallback(\n      callbackIds.map(callbackId =>\n        SubscriptionIdentifier.get(\n          callbackId,\n          firstIdentifier,\n          secondIdentifier\n        )\n      )\n    );\n    return await this.#request(endpoint, message, MessageType.REQUEST);\n  }\n\n  #requestToCallback(\n    endpoint: string,\n    message: any,\n    messageType: MessageType,\n    callback = emptyFn\n  ) {\n    const sequenceNumber = this.#callbackManager.putCallback(callback);\n    const frame = {\n      m: messageType,\n      i: sequenceNumber,\n      n: endpoint,\n      o: message\n    };\n    this.#peekMessageOut(frame);\n    this.#websocket.send(JSON.stringify(frame));\n  }\n\n  closeConnection() {\n    this.#websocket.socket.close();\n  }\n\n  async authenticateUser(params: {\n    ApiKey: string;\n    Signature: string;\n    UserId: string;\n    Nonce: string;\n  }): Promise<void> {\n    await this.request(Endpoint.AUTHENTICATE_USER, RequestType.NONE, params);\n  }\n}\n\nfunction newStandardErrorFromString(errorStr: string): any {\n  return new StandardError({\n    result: false,\n    errormsg: errorStr,\n    errorcode: ErrorCode.UNDEFINED,\n    statusCode: -1,\n    detail: \"\"\n  });\n}\n\nfunction isErrorMessage(message: MessageFrame): boolean {\n  let isErrorType = message.m === MessageType.ERROR;\n  if (isErrorType) {\n    return true;\n  }\n  try {\n    let standardError = message.o as StandardResponse;\n    return standardError.result == false;\n  } catch (e) {\n    return false;\n  }\n}\n", "import { MessageFrame } from \"./messageFrame\";\n\nexport class CallbackManager {\n  #subscriptionCallbacks: {\n    [eventName: string]: (message: MessageFrame) => void;\n  };\n  #callbacks: { [sequenceNumber: number]: (message: MessageFrame) => void };\n  #sequenceNumber: number;\n\n  constructor() {\n    this.#subscriptionCallbacks = {};\n    this.#callbacks = {};\n    this.#sequenceNumber = 2;\n  }\n\n  putCallback(callback: (event: MessageFrame) => void): number {\n    var sequenceNumber = this.#sequenceNumber;\n    this.#callbacks[sequenceNumber] = callback;\n    this.#sequenceNumber += 2;\n    return sequenceNumber;\n  }\n\n  popCallback(sequenceNumber: number): (event: MessageFrame) => void {\n    let callback = this.#callbacks[sequenceNumber];\n    delete this.#callbacks[sequenceNumber];\n    return callback != null ? callback : (o) => null;\n  }\n\n  addSubscriptionCallback(\n    callbackId: string,\n    callback: (event: MessageFrame) => void,\n  ): void {\n    this.#subscriptionCallbacks[callbackId] = callback;\n  }\n\n  getSubscriptionCallback(\n    callbackIdentifier: string,\n  ): (event: MessageFrame) => void {\n    let handler = this.#subscriptionCallbacks[callbackIdentifier];\n    return handler || null;\n  }\n\n  removeSubscriptionCallback(callbackIds: string[]): void {\n    callbackIds.map(\n      (callbackId) => delete this.#subscriptionCallbacks[callbackId],\n    );\n  }\n}\n", "export enum ErrorCode {\n  UNDEFINED = -1,\n  NOT_AN_ERROR = 0,\n  NOT_AUTHORIZED = 20,\n  INVALID_RESPONSE = 100,\n  OPERATION_FAILED = 101,\n  SERVER_ERROR = 102,\n  RESOURCE_NOT_FOUND = 104\n}\n\nexport default ErrorCode;\n", "import { WebSocketEndpoint } from \"../../constants/endpoints\";\nimport { MessageFrame } from \"./messageFrame\";\n\nexport class SubscriptionIdentifier {\n  static #mapping: Partial<\n    Record<WebSocketEndpoint, (eventName: string, payloadStr: string) => string>\n  > = {\n    [WebSocketEndpoint.SUBSCRIBE_LEVEL1]: this.#getLevel1TickerName,\n    [WebSocketEndpoint.UPDATE_LEVEL1]: this.#getLevel1TickerName,\n    [WebSocketEndpoint.SUBSCRIBE_LEVEL2]: this.#getLevel2TickerName,\n    [WebSocketEndpoint.UPDATE_LEVEL2]: this.#getLevel2TickerName,\n    [WebSocketEndpoint.SUBSCRIBE_TICKER]: this.#getTickerName,\n    [WebSocketEndpoint.UPDATE_TICKER]: this.#getTickerName,\n    [WebSocketEndpoint.SUBSCRIBE_TRADES]: this.#getSocketTradeName,\n    [WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS]: this.#getOrderEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION]: this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE]:\n      this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION]:\n      this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE]: this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE]: this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE]:\n      this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE]:\n      this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT]:\n      this.#getAccountEventName,\n    [WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT]: this.#getAccountEventName,\n  };\n\n  static get(\n    eventName: string,\n    firstIdentifier: number | null = null,\n    secondIdentifier: number | null = null,\n  ) {\n    return (\n      eventName +\n      SubscriptionIdentifier.#getIdPart(firstIdentifier) +\n      SubscriptionIdentifier.#getIdPart(secondIdentifier)\n    );\n  }\n\n  static #getIdPart(firstIdentifier: number) {\n    return firstIdentifier != null ? \"_\" + firstIdentifier : \"\";\n  }\n\n  static getFromMessageFrame(message: MessageFrame): string {\n    return this.#mapping[message.n]?.(message.n, message.o) ?? message.n;\n  }\n\n  static #getTickerName(eventName: string, payloadStr: string): string {\n    const instrumentId = SubscriptionIdentifier.#getValueFromList(\n      payloadStr,\n      8,\n    );\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getLevel1TickerName(eventName: string, payloadStr: string): string {\n    return (\n      eventName + \"_\" + SubscriptionIdentifier.#getInstrumentedId(payloadStr)\n    );\n  }\n\n  static #getLevel2TickerName(eventName: string, payloadStr: string): string {\n    let instrumentId = SubscriptionIdentifier.#getValueFromList(payloadStr, 7);\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getSocketTradeName(eventName: string, payloadStr: string): string {\n    const instrumentId = SubscriptionIdentifier.#getValueFromList(\n      payloadStr,\n      1,\n    );\n    if (instrumentId == null) {\n      return eventName;\n    }\n    return eventName + \"_\" + instrumentId;\n  }\n\n  static #getAccountEventName(eventName: string, payloadStr: string): string {\n    let accountId = SubscriptionIdentifier.#getAccountId(payloadStr);\n    if (accountId != null) {\n      return eventName + \"_\" + accountId;\n    }\n    accountId = this.#getAccountIdFromAccount(payloadStr);\n    if (accountId != null) {\n      return eventName + \"_\" + accountId;\n    }\n    return eventName;\n  }\n\n  static #getOrderEventName(eventName: string, payloadStr: string): string {\n    const data: { InstrumentId?: string; AccountId: number } =\n      JSON.parse(payloadStr);\n    let identifier = eventName + \"_\" + data.AccountId;\n    if (data.InstrumentId) {\n      return identifier + \"_\" + data.InstrumentId;\n    }\n  }\n\n  static #getValueFromList(\n    payloadStr: string,\n    index: number,\n  ): string | number | null {\n    const data: any[][] = JSON.parse(payloadStr);\n    if (data.length == 0) {\n      return null;\n    }\n    if (data[0].length <= index) {\n      return null;\n    }\n    return data[0][index];\n  }\n\n  static #getInstrumentedId(payloadStr: string): string {\n    const data: { InstrumentId: string } = JSON.parse(payloadStr);\n    return data.InstrumentId;\n  }\n\n  static #getInstrumentedIdFromInstrument(payloadStr: string): string {\n    const data: { Instrument: string } = JSON.parse(payloadStr);\n    return data.Instrument;\n  }\n\n  static #getAccountId(payloadStr: string): string {\n    const data: { AccountId: string } = JSON.parse(payloadStr);\n    return data.AccountId;\n  }\n\n  static #getAccountIdFromAccount(payloadStr: string): string {\n    const data: { Account: string } = JSON.parse(payloadStr);\n    return data.Account;\n  }\n}\n", "import { MessageFrame } from \"../core/websocket/messageFrame\";\nimport { SubscriptionHandler } from \"../core/websocket/subscriptionHandler\";\n\nexport function newMaybeHandler<T>(\n  eventName: string,\n  recordHandler: ((record: T) => void) | null\n): SubscriptionHandler<MessageFrame> | null {\n  if (recordHandler == null) {\n    return null;\n  }\n  return newHandler(eventName, recordHandler);\n}\n\nexport function newHandler<T>(\n  eventName: string,\n  recordHandler: (record: T) => void\n): SubscriptionHandler<MessageFrame> {\n  return {\n    eventName: eventName,\n    eventHandler: messageFrame => recordHandler(parseRecord(messageFrame.o))\n  };\n}\n\nexport function parseRecord<T>(jsonData: string): T {\n  return JSON.parse(jsonData) as T;\n}\n", "import { WebSocketEndpoint } from \"../constants/endpoints\";\nimport { ServiceClient } from \"../core/serviceClient\";\nimport { SubscriptionIdentifier } from \"../core/websocket/SubscriptionIdentifier\";\nimport {\n  CancelOrderRejectEvent,\n  DepositEvent\n} from \"../models/enums/accountEvent\";\nimport { IndexTrade } from \"../models/enums/indexTrade\";\nimport { Level2Ticker } from \"../models/enums/level2Item\";\nimport { Ticker } from \"../models/enums/ticker\";\nimport { SubscribeAccountEventsRequest } from \"../models/request/subscribeAccountEvents\";\nimport { SubscribeLevel1Request } from \"../models/request/subscribeLevel1\";\nimport { SubscribeLevel2Request } from \"../models/request/subscribeLevel2\";\nimport { SubscribeOrderStateEventsRequest } from \"../models/request/subscribeOrderStateEvents\";\nimport { SubscribeTickerRequest } from \"../models/request/subscribeTicker\";\nimport { SubscribeTradesRequest } from \"../models/request/subscribeTrades\";\nimport { UnsubscribeAccountEventsRequest } from \"../models/request/unsubscribeAccountEvents\";\nimport { UnsubscribeLevel1Request } from \"../models/request/unSubscribeLevel1\";\nimport { UnsubscribeLevel2Request } from \"../models/request/unSubscribeLevel2\";\nimport { UnsubscribeOrderStateEventsRequest } from \"../models/request/unsubscribeOrderStateEvents\";\nimport { UnsubscribeTickerRequest } from \"../models/request/unsubscribeTicker\";\nimport { UnsubscribeTradesRequest } from \"../models/request/unsubscribeTrades\";\nimport { AccountInfo } from \"../models/response/accountInfo\";\nimport { AccountPositions } from \"../models/response/accountPositions\";\nimport { DepositTicket } from \"../models/response/depositTicket\";\nimport { Order } from \"../models/response/order\";\nimport { OrderTrade } from \"../models/response/orderTrade\";\nimport { Level1Ticker } from \"../models/response/subscribeLevel1\";\nimport { Transaction } from \"../models/response/transaction\";\nimport { WithdrawTicket } from \"../models/response/withdrawTicket\";\nimport { completeParams } from \"../utils/completeParams\";\nimport { parseIndexTrade } from \"../utils/parseIndexTrade\";\nimport {\n  newHandler,\n  newMaybeHandler\n} from \"../utils/subscriptionCallbacksHandler\";\n\nexport class SubscriptionService {\n  #serviceCore: ServiceClient;\n  private readonly OMS_ID = 1;\n\n  constructor(serviceCore: ServiceClient) {\n    this.#serviceCore = serviceCore;\n  }\n\n  async subscribeLevel1(\n    request: SubscribeLevel1Request,\n    snapshotHandler: (ticker: Level1Ticker) => void,\n    updateHandler: (ticker: Level1Ticker) => void\n  ): Promise<void> {\n    if (!request.InstrumentId && !request.Symbol)\n      throw new Error(\n        \"Either InstrumentId or Symbol must be specified for Level1 subscription.\"\n      );\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_LEVEL1,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_LEVEL1, snapshotHandler),\n        newHandler(WebSocketEndpoint.UPDATE_LEVEL1, updateHandler)\n      ]\n    );\n  }\n\n  async unsubscribeLevel1(request: UnsubscribeLevel1Request): Promise<void> {\n    if (!request.InstrumentId && !request.Symbol)\n      throw new Error(\n        \"Either InstrumentId or Symbol must be specified for Level1 unsubscription.\"\n      );\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_LEVEL1,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_LEVEL1, WebSocketEndpoint.UNSUBSCRIBE_LEVEL1]\n    );\n  }\n\n  async subscribeLevel2(\n    request: SubscribeLevel2Request,\n    snapshotHandler: (ticker: Level2Ticker) => void,\n    updateHandler: (ticker: Level2Ticker) => void\n  ): Promise<void> {\n    if (!request.InstrumentId && !request.Symbol)\n      throw new Error(\n        \"Either InstrumentId or Symbol must be specified for Level2 subscription.\"\n      );\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_LEVEL2,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_LEVEL2, snapshotHandler),\n        newHandler(WebSocketEndpoint.UPDATE_LEVEL2, updateHandler)\n      ]\n    );\n  }\n\n  /**\n   * This TypeScript function unsubscribes from Level2 data using WebSocket communication.\n   * @param {UnsubscribeLevel2Request} request - The `unsubscribeLevel2` function takes a\n   * `UnsubscribeLevel2Request` object as a parameter. This object should contain the following\n   * properties:\n   * @returns The `unsubscribeLevel2` method is returning a Promise that resolves to a\n   * `void` object.\n   */\n  async unsubscribeLevel2(request: UnsubscribeLevel2Request): Promise<void> {\n    if (!request.InstrumentId && !request.Symbol)\n      throw new Error(\n        \"Either InstrumentId or Symbol must be specified for Level2 unsubscription.\"\n      );\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_LEVEL2,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        SubscriptionIdentifier.get(\n          WebSocketEndpoint.SUBSCRIBE_LEVEL2,\n          request.InstrumentId\n        )\n      ]\n    );\n  }\n\n  /**\n   * Suscribe a eventos de trades para un instrumento espec\u00EDfico.\n   * @param request Par\u00E1metros de la suscripci\u00F3n.\n   * @param eventHandlers Manejadores de eventos para procesar los trades.\n   */\n  async subscribeTrades(\n    request: SubscribeTradesRequest,\n    subcriptionHandler: (trade: IndexTrade) => void\n  ): Promise<void> {\n    if (!request.InstrumentId) {\n      throw new Error(\"InstrumentId is required for subscribing to trades.\");\n    }\n    if (!request.IncludeLastCount || request.IncludeLastCount < 0) {\n      throw new Error(\"IncludeLastCount must be a non-negative number.\");\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_TRADES,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [\n        newHandler<{ [key: number]: number }>(\n          WebSocketEndpoint.SUBSCRIBE_TRADES,\n          mapTrade => subcriptionHandler(parseIndexTrade(mapTrade))\n        )\n      ]\n    );\n  }\n\n  /**\n   * Desuscribe de eventos de trades para un instrumento espec\u00EDfico.\n   * @param request Par\u00E1metros de la desuscripci\u00F3n.\n   * @returns Respuesta de la desuscripci\u00F3n.\n   */\n  async unsubscribeTrades(request: UnsubscribeTradesRequest): Promise<void> {\n    if (!request.InstrumentId) {\n      throw new Error(\n        \"InstrumentId is required for unsubscribing from trades.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_TRADES,\n      request.InstrumentId,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_TRADES]\n    );\n  }\n\n  async subscribeTicker(\n    request: SubscribeTickerRequest,\n    snapshotHandler: (tickers: Ticker[]) => void,\n    updateHandler: (tickers: Ticker[]) => void\n  ): Promise<void> {\n    if (!request.InstrumentId) {\n      throw new Error(\"InstrumentId is required for subscribing from ticker.\");\n    }\n    if (!request.Interval) {\n      throw new Error(\"Interval is required for subscribing from ticker.\");\n    }\n    if (!request.IncludeLastCount) {\n      throw new Error(\n        \"IncludeLastCount is required for subscribing from ticker.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_TICKER,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [\n        newHandler(WebSocketEndpoint.SUBSCRIBE_TICKER, snapshotHandler),\n        newHandler(\n          WebSocketEndpoint.UPDATE_TICKER + \"_\" + request.InstrumentId,\n          updateHandler\n        )\n      ]\n    );\n  }\n\n  /**\n   * Desuscribe del feed de datos de mercado de un ticker espec\u00EDfico.\n   * @param request Par\u00E1metros de la desuscripci\u00F3n.\n   * @returns Respuesta de la desuscripci\u00F3n.\n   */\n  async unsubscribeTicker(request: UnsubscribeTickerRequest): Promise<void> {\n    if (!request.InstrumentId) {\n      throw new Error(\n        \"InstrumentId is required for unsubscribing from ticker.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_TICKER,\n      request.InstrumentId || null,\n      null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_TICKER]\n    );\n  }\n\n  async subscribeAccountEvents(\n    request: SubscribeAccountEventsRequest,\n    eventHandlers: {\n      withdrawTicketUpdateEventHandler?: (event: WithdrawTicket) => void;\n      orderTradeEventHandler?: (event: OrderTrade) => void;\n      orderStateEventHandler?: (event: Order) => void;\n      depositTicketUpdateEventHandler?: (event: DepositTicket) => void;\n      accountPositionEventHandler?: (event: AccountPositions) => void;\n      accountInfoUpdateEventHandler?: (event: AccountInfo) => void;\n      cancelOrderRejectEventHandler?: (event: CancelOrderRejectEvent) => void;\n      depositEventHandler?: (event: DepositEvent) => void;\n      transactionEventHandler?: (event: Transaction) => void;\n    }\n  ): Promise<void> {\n    if (!request.AccountId)\n      throw new Error(\n        \"AccountId is required for subscribing to account events.\"\n      );\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_ACCOUNT_EVENTS,\n      request.AccountId,\n      null,\n      requestWithOMSId,\n      [\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE,\n          eventHandlers.withdrawTicketUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE,\n          eventHandlers.orderTradeEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n          eventHandlers.orderStateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE,\n          eventHandlers.depositTicketUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION,\n          eventHandlers.accountPositionEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE,\n          eventHandlers.accountInfoUpdateEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT,\n          eventHandlers.cancelOrderRejectEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT,\n          eventHandlers.depositEventHandler || null\n        ),\n        newMaybeHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION,\n          eventHandlers.transactionEventHandler || null\n        )\n      ].filter(handler => handler != null)\n    );\n  }\n\n  /**\n   * Desuscribe de eventos de cuenta para un instrumento espec\u00EDfico.\n   * @param request Par\u00E1metros de la desuscripci\u00F3n.\n   * @returns Respuesta de la desuscripci\u00F3n.\n   */\n  async unsubscribeAccountEvents(\n    request: UnsubscribeAccountEventsRequest\n  ): Promise<void> {\n    if (!request.AccountId) {\n      throw new Error(\n        \"AccountId is required for unsubscribing from account events.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_ACCOUNT_EVENTS,\n      request.AccountId,\n      null,\n      requestWithOMSId,\n      [\n        WebSocketEndpoint.ACCOUNT_EVENT_WITHDRAW_TICKET_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ORDER_TRADE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT_TICKET_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_POSITION,\n        WebSocketEndpoint.ACCOUNT_EVENT_ACCOUNT_INFO_UPDATE,\n        WebSocketEndpoint.ACCOUNT_EVENT_CANCEL_ORDER_REJECT,\n        WebSocketEndpoint.ACCOUNT_EVENT_DEPOSIT,\n        WebSocketEndpoint.ACCOUNT_EVENT_TRANSACTION\n      ]\n    );\n  }\n\n  async subscribeOrderStateEvents(\n    request: SubscribeOrderStateEventsRequest,\n    subscriptionHandler: (event: Order) => void\n  ): Promise<void> {\n    if (!request.AccountId) {\n      throw new Error(\n        \"AccountId is required for subscribing to order state events.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    return await this.#serviceCore.subscribe(\n      WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS,\n      request.AccountId,\n      request.InstrumentId || null,\n      requestWithOMSId,\n      [\n        newHandler(\n          WebSocketEndpoint.ACCOUNT_EVENT_ORDER_STATE,\n          subscriptionHandler\n        )\n      ]\n    );\n  }\n\n  /**\n   * Desuscribe de eventos de estado de \u00F3rdenes para una cuenta espec\u00EDfica.\n   * @param request Par\u00E1metros de la desuscripci\u00F3n.\n   * @returns Respuesta de la desuscripci\u00F3n.\n   */\n  async unsubscribeOrderStateEvents(\n    request: UnsubscribeOrderStateEventsRequest\n  ): Promise<void> {\n    if (!request.AccountId) {\n      throw new Error(\n        \"AccountId is required for unsubscribing from order state events.\"\n      );\n    }\n\n    const requestWithOMSId = completeParams(request, this.OMS_ID);\n\n    await this.#serviceCore.unsubscribe(\n      WebSocketEndpoint.UNSUBSCRIBE_ORDER_STATE_EVENTS,\n      request.AccountId,\n      request.InstrumentId || null,\n      requestWithOMSId,\n      [WebSocketEndpoint.SUBSCRIBE_ORDER_STATE_EVENTS]\n    );\n  }\n}\n", "import { WebsocketClient } from \"../core/websocket/websocketClient\";\nimport { AccountService } from \"./accountService\";\nimport { AuthService } from \"./authService\";\nimport { FeeService } from \"./feeService\";\nimport { InstrumentService } from \"./instrumentService\";\nimport { ProductService } from \"./productService\";\nimport { ReportService } from \"./reportService\";\nimport { SystemService } from \"./systemService\";\nimport { TradingService } from \"./tradingService\";\nimport { UserService } from \"./userService\";\nimport { getNonce, sign } from \"../core/hmac\";\nimport { WebsocketHooks } from \"../core/websocket/websocketHooks\";\nimport { MessageFrame } from \"../core/websocket/messageFrame\";\nimport { SubscriptionService } from \"./subscriptionService\";\n\nconst DEFAULT_DOMAIN = \"api.notbank.exchange\";\n\nexport class WebsocketServiceFactory {\n  #websocketClient: WebsocketClient;\n\n  constructor(params?: {\n    domain?: string;\n    peekMessageIn?: (message: MessageFrame) => void;\n    peekMessageOut?: (message: MessageFrame) => void;\n  }) {\n    const finalDomain = params?.domain || DEFAULT_DOMAIN;\n\n    this.#websocketClient = new WebsocketClient({\n      domain: finalDomain,\n      peekMessageIn: params?.peekMessageIn,\n      peekMessageOut: params?.peekMessageOut\n    });\n  }\n\n  connect(hooks: WebsocketHooks = {}): Promise<void> {\n    return this.#websocketClient.connect(hooks);\n  }\n\n  close() {\n    this.#websocketClient.close();\n  }\n\n  get isConnecting(): boolean {\n    return this.#websocketClient.readyState === WebSocket.CONNECTING;\n  }\n\n  get isConnected(): boolean {\n    return this.#websocketClient.readyState === WebSocket.OPEN;\n  }\n\n  get isClosing(): boolean {\n    return this.#websocketClient.readyState === WebSocket.CLOSING;\n  }\n\n  get isClosed(): boolean {\n    return this.#websocketClient.readyState === WebSocket.CLOSED;\n  }\n\n  async authenticateUser(params: {\n    ApiPublicKey: string;\n    ApiSecretKey: string;\n    UserId: string;\n  }): Promise<void> {\n    var nonce = getNonce();\n    var signature = sign(\n      params.ApiPublicKey,\n      params.ApiSecretKey,\n      params.UserId,\n      nonce\n    );\n    await this.#websocketClient.authenticateUser({\n      ApiKey: params.ApiPublicKey,\n      Signature: signature,\n      UserId: params.UserId,\n      Nonce: nonce\n    });\n  }\n\n  newAccountService(): AccountService {\n    return new AccountService(this.#websocketClient);\n  }\n\n  newAuthService(): AuthService {\n    return new AuthService(this.#websocketClient);\n  }\n\n  newFeeService(): FeeService {\n    return new FeeService(this.#websocketClient);\n  }\n\n  newInstrumentService(): InstrumentService {\n    return new InstrumentService(this.#websocketClient);\n  }\n\n  newProductService(): ProductService {\n    return new ProductService(this.#websocketClient);\n  }\n\n  newReportService(): ReportService {\n    return new ReportService(this.#websocketClient);\n  }\n\n  newSystemService(): SystemService {\n    return new SystemService(this.#websocketClient);\n  }\n\n  newSubscriptionService(): SubscriptionService {\n    return new SubscriptionService(this.#websocketClient);\n  }\n\n  newTradingService(): TradingService {\n    return new TradingService(this.#websocketClient);\n  }\n\n  newUserService(): UserService {\n    return new UserService(this.#websocketClient);\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "index_exports", "__export", "HttpClient", "WebsocketClient", "index_default", "completeParams", "params", "omsId", "__spreadProps", "__spreadValues", "_serviceCore", "UserService", "serviceCore", "__privateAdd", "__privateSet", "request", "__async", "params", "completeParams", "__privateGet", "_serviceCore", "AccountService", "serviceCore", "__privateAdd", "__privateSet", "request", "__async", "paramsWithOMSId", "completeParams", "__privateGet", "params", "_serviceCore", "AuthService", "serviceCore", "__privateAdd", "__privateSet", "params", "__async", "__privateGet", "_serviceCore", "FeeService", "serviceCore", "__privateAdd", "__privateSet", "params", "__async", "paramsWithOMSId", "completeParams", "__privateGet", "_serviceCore", "InstrumentService", "serviceCore", "__privateAdd", "__privateSet", "params", "__async", "paramsWithOMSId", "completeParams", "__privateGet", "_serviceCore", "ProductService", "serviceCore", "__privateAdd", "__privateSet", "params", "__async", "paramsWithOMSId", "completeParams", "__privateGet", "_serviceCore", "ReportService", "serviceCore", "__privateAdd", "__privateSet", "_serviceCore", "SystemService", "serviceCore", "__privateAdd", "__privateSet", "__async", "__privateGet", "OrderTypeInt", "OrderTypeStr", "completeParamsArray", "paramsArray", "omsId", "params", "__spreadProps", "__spreadValues", "parseIndexTrade", "jsonTrade", "_serviceCore", "TradingService", "serviceCore", "__privateAdd", "__privateSet", "params", "__async", "paramsWithOMSId", "completeParamsArray", "__privateGet", "request", "completeParams", "item", "parseIndexTrade", "data", "snapshot", "import_crypto", "getRandomInt", "max", "getNonce", "sign", "apiPublicKey", "apiSecretKey", "userId", "nonce", "message", "hmac256", "crypto", "models_exports", "__export", "AccountType", "ActionType", "ChangeReason", "DepositFeeMessages", "DepositStatus", "Direction", "FeeCalcType", "FeeProductType", "FeeType", "InstrumentType", "MakerTaker", "OrderFlag", "OrderSide", "OrderState", "OrderTypeInt", "OrderTypeStr", "PegPriceType", "ProductType", "ReferenceType", "RiskType", "SessionStatus", "SideType", "StandardError", "SubscriptionResponse", "TimeInForce", "TradeDirection", "TradeSide", "TransactionReferenceTypes", "TransactionTypes", "UnsubscribeLevel2ErrorCode", "UnsubscribeTradesError", "UnsubscriptionResponse", "WithdrawErrorCode", "WithdrawFeeMessages", "WithdrawTemplateType", "OrderState", "OrderSide", "ChangeReason", "MakerTaker", "AccountType", "ActionType", "DepositFeeMessages", "DepositStatus", "Direction", "FeeProductType", "InstrumentType", "OrderFlag", "PegPriceType", "ProductType", "ReferenceType", "RiskType", "SessionStatus", "SideType", "TimeInForce", "TradeDirection", "TradeSide", "TransactionReferenceTypes", "TransactionTypes", "UnsubscribeLevel2ErrorCode", "UnsubscribeTradesError", "WithdrawErrorCode", "WithdrawFeeMessages", "WithdrawTemplateType", "FeeCalcType", "FeeType", "NotbankError", "StandardError", "NotbankError", "standardResponse", "errMsg", "UnsubscriptionResponse", "SubscriptionResponse", "_aptoken", "_HOST", "HttpClient", "domain", "__privateAdd", "__privateSet", "endpoint", "requestType", "params", "__async", "message", "response", "_0", "config", "jsonResponse", "standardResponse", "StandardError", "extraHeaders", "headers", "__privateGet", "__spreadValues", "firstIdentifier", "secondIdentifier", "subscriptionCallbacks", "callback_ids", "responseHandler", "responseHandlers", "DEFAULT_DOMAIN", "_httpCore", "HttpServiceFactory", "domain", "__privateAdd", "finalDomain", "__privateSet", "HttpClient", "params", "__async", "nonce", "getNonce", "signature", "sign", "__privateGet", "AccountService", "AuthService", "FeeService", "InstrumentService", "ProductService", "ReportService", "SystemService", "TradingService", "UserService", "import_universal_websocket_client", "_subscriptionCallbacks", "_callbacks", "_sequenceNumber", "CallbackManager", "__privateAdd", "__privateSet", "callback", "sequenceNumber", "__privateGet", "o", "callbackId", "callbackIdentifier", "callbackIds", "ErrorCode", "errorCode_default", "_mapping", "_SubscriptionIdentifier_static", "getIdPart_fn", "getTickerName_fn", "getLevel1TickerName_fn", "getLevel2TickerName_fn", "getSocketTradeName_fn", "getAccountEventName_fn", "getOrderEventName_fn", "getValueFromList_fn", "getInstrumentedId_fn", "getInstrumentedIdFromInstrument_fn", "getAccountId_fn", "getAccountIdFromAccount_fn", "_SubscriptionIdentifier", "eventName", "firstIdentifier", "secondIdentifier", "_a", "_b", "__privateMethod", "message", "_c", "__privateGet", "payloadStr", "instrumentId", "accountId", "data", "identifier", "index", "__privateAdd", "SubscriptionIdentifier", "emptyFn", "o", "_domain", "_callbackManager", "_websocket", "_peekMessageIn", "_peekMessageOut", "_WebsocketClient_instances", "getSubscriptionCallbackId_fn", "handleMessage_fn", "request_fn", "handleRequestResponse_fn", "requestToCallback_fn", "WebsocketClient", "params", "__privateAdd", "__privateSet", "CallbackManager", "_", "__async", "hooks", "WebSocket", "__privateGet", "event", "_a", "messageFrame", "__privateMethod", "resolve", "endpoint", "requestType", "message", "firstIdentifier", "secondIdentifier", "subscriptionCallbacks", "handler", "SubscriptionIdentifier", "callbackIds", "callbackId", "callback", "isErrorMessage", "subscriptionCallback", "messageType", "reject", "response", "payload", "e", "newStandardErrorFromString", "StandardError", "standardResponse", "sequenceNumber", "frame", "errorStr", "errorCode_default", "newMaybeHandler", "eventName", "recordHandler", "newHandler", "messageFrame", "parseRecord", "jsonData", "_serviceCore", "SubscriptionService", "serviceCore", "__privateAdd", "__privateSet", "request", "snapshotHandler", "updateHandler", "__async", "requestWithOMSId", "completeParams", "__privateGet", "newHandler", "SubscriptionIdentifier", "subcriptionHandler", "mapTrade", "parseIndexTrade", "eventHandlers", "newMaybeHandler", "handler", "subscriptionHandler", "DEFAULT_DOMAIN", "_websocketClient", "WebsocketServiceFactory", "params", "__privateAdd", "finalDomain", "__privateSet", "WebsocketClient", "hooks", "__privateGet", "__async", "nonce", "getNonce", "signature", "sign", "AccountService", "AuthService", "FeeService", "InstrumentService", "ProductService", "ReportService", "SystemService", "SubscriptionService", "TradingService", "UserService", "HttpClient", "HttpServiceFactory", "WebsocketClient", "WebsocketServiceFactory", "index_default", "models_exports"]
}
